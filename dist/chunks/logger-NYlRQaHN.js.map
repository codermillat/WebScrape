{"version":3,"file":"logger-NYlRQaHN.js","sources":["../../src/shared/logger.ts"],"sourcesContent":["// Lightweight structured logger (Phase 2 bootstrap)\n// Usage: import { log, logger, setLogLevel, LogLevel } from '@shared/logger';\nexport type LogLevelName = 'debug' | 'info' | 'warn' | 'error' | 'silent';\n\nexport interface LogEntry {\n  ts: string;\n  level: LogLevelName;\n  code?: string;\n  msg: string;\n  meta?: unknown;\n}\n\nconst levelPriority: Record<LogLevelName, number> = {\n  debug: 10,\n  info: 20,\n  warn: 30,\n  error: 40,\n  silent: 100\n};\n\nlet currentLevel: LogLevelName = 'info';\n\nexport function setLogLevel(lvl: LogLevelName) {\n  currentLevel = lvl;\n}\n\nfunction emit(entry: LogEntry) {\n  if (levelPriority[entry.level] < levelPriority[currentLevel]) return;\n  // Consistent console mapping\n  const payload = { ...entry };\n  switch (entry.level) {\n    case 'debug':\n      // eslint-disable-next-line no-console\n      console.debug('[EXT]', payload);\n      break;\n    case 'info':\n      // eslint-disable-next-line no-console\n      console.info('[EXT]', payload);\n      break;\n    case 'warn':\n      // eslint-disable-next-line no-console\n      console.warn('[EXT]', payload);\n      break;\n    case 'error':\n      // eslint-disable-next-line no-console\n      console.error('[EXT]', payload);\n      break;\n  }\n}\n\nexport function log(level: LogLevelName, msg: string, meta?: unknown, code?: string) {\n  emit({\n    ts: new Date().toISOString(),\n    level,\n    msg,\n    meta,\n    code\n  });\n}\n\nexport const logger = {\n  setLevel: setLogLevel,\n  debug: (msg: string, meta?: unknown, code?: string) => log('debug', msg, meta, code),\n  info: (msg: string, meta?: unknown, code?: string) => log('info', msg, meta, code),\n  warn: (msg: string, meta?: unknown, code?: string) => log('warn', msg, meta, code),\n  error: (msg: string, meta?: unknown, code?: string) => log('error', msg, meta, code)\n};\n\n// Auto elevate to debug if extension loaded with ?debug in popup URL\ntry {\n  if (typeof location !== 'undefined' && /\\bdebug\\b/i.test(location.search)) {\n    setLogLevel('debug');\n  }\n} catch { /* ignore */ }\n"],"names":[],"mappings":"AAYA,MAAM,gBAA8C;AAAA,EAClD,OAAO;AAAA,EACP,MAAM;AAAA,EACN,MAAM;AAAA,EACN,OAAO;AAAA,EACP,QAAQ;AACV;AAEA,IAAI,eAA6B;AAE1B,SAAS,YAAY,KAAmB;AAC7C,iBAAe;AACjB;AAEA,SAAS,KAAK,OAAiB;AAC7B,MAAI,cAAc,MAAM,KAAK,IAAI,cAAc,YAAY,EAAG;AAE9D,QAAM,UAAU,EAAE,GAAG,MAAA;AACrB,UAAQ,MAAM,OAAA;AAAA,IACZ,KAAK;AAEH,cAAQ,MAAM,SAAS,OAAO;AAC9B;AAAA,IACF,KAAK;AAEH,cAAQ,KAAK,SAAS,OAAO;AAC7B;AAAA,IACF,KAAK;AAEH,cAAQ,KAAK,SAAS,OAAO;AAC7B;AAAA,IACF,KAAK;AAEH,cAAQ,MAAM,SAAS,OAAO;AAC9B;AAAA,EAAA;AAEN;AAEO,SAAS,IAAI,OAAqB,KAAa,MAAgB,MAAe;AACnF,OAAK;AAAA,IACH,KAAI,oBAAI,KAAA,GAAO,YAAA;AAAA,IACf;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,CACD;AACH;AAEO,MAAM,SAAS;AAAA,EACpB,UAAU;AAAA,EACV,OAAO,CAAC,KAAa,MAAgB,SAAkB,IAAI,SAAS,KAAK,MAAM,IAAI;AAAA,EACnF,MAAM,CAAC,KAAa,MAAgB,SAAkB,IAAI,QAAQ,KAAK,MAAM,IAAI;AAAA,EACjF,MAAM,CAAC,KAAa,MAAgB,SAAkB,IAAI,QAAQ,KAAK,MAAM,IAAI;AAAA,EACjF,OAAO,CAAC,KAAa,MAAgB,SAAkB,IAAI,SAAS,KAAK,MAAM,IAAI;AACrF;AAGA,IAAI;AACF,MAAI,OAAO,aAAa,eAAe,aAAa,KAAK,SAAS,MAAM,GAAG;AACzE,gBAAY,OAAO;AAAA,EACrB;AACF,QAAQ;AAAe;"}